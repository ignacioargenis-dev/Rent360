// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  name            String
  role            UserRole
  phone           String?
  avatar          String?
  bio             String?
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  documents       Document[]
  properties      Property[]
  contractsAsOwner Contract[] @relation("OwnerContracts")
  contractsAsTenant Contract[] @relation("TenantContracts")
  contractsAsBroker Contract[] @relation("BrokerContracts")
  reviewsGiven    Review[] @relation("ReviewGiven")
  reviewsReceived Review[] @relation("ReviewReceived")
  messagesSent    Message[] @relation("MessageSent")
  messagesReceived Message[] @relation("MessageReceived")
  tickets         Ticket[]
  assignedTickets  Ticket[] @relation("AssignedTickets")
  ticketComments  TicketComment[]
  visitsAsRunner  Visit[] @relation("VisitRunner")
  visitsAsTenant  Visit[] @relation("VisitTenant")
  notifications   Notification[]
  auditLogs       AuditLog[]
  
  @@map("users")
}

// Property model
model Property {
  id          String        @id @default(cuid())
  title       String
  description String
  address     String
  city        String
  commune     String
  region      String
  price       Float
  deposit     Float
  bedrooms    Int
  bathrooms   Int
  area        Float
  status      PropertyStatus @default(AVAILABLE)
  type        PropertyType
  images      String?       // JSON array of image URLs
  features    String?       // JSON array of features
  ownerId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  owner       User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contracts   Contract[]
  reviews     Review[]
  visits      Visit[]
  maintenance Maintenance[]
  
  @@map("properties")
}

// Contract model
model Contract {
  id             String        @id @default(cuid())
  contractNumber String        @unique
  propertyId     String
  tenantId       String
  ownerId        String
  brokerId       String?
  startDate      DateTime
  endDate        DateTime
  monthlyRent    Float
  deposit        Float
  status         ContractStatus @default(DRAFT)
  terms          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  terminatedAt   DateTime?

  // Relations
  property       Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant         User          @relation("TenantContracts", fields: [tenantId], references: [id], onDelete: Cascade)
  owner          User          @relation("OwnerContracts", fields: [ownerId], references: [id], onDelete: Cascade)
  broker         User?         @relation("BrokerContracts", fields: [brokerId], references: [id], onDelete: SetNull)
  payments       Payment[]
  reviews        Review[]
  
  @@map("contracts")
}

// Payment model
model Payment {
  id             String        @id @default(cuid())
  paymentNumber  String        @unique
  contractId     String
  amount         Float
  dueDate        DateTime
  paidDate       DateTime?
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod?
  transactionId  String?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  contract       Contract      @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

// Review model
model Review {
  id          String   @id @default(cuid())
  propertyId  String?
  contractId  String?
  reviewerId  String
  revieweeId  String
  rating      Int
  comment     String?
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  contract    Contract? @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reviewer    User      @relation("ReviewGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User      @relation("ReviewReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

// Message model
model Message {
  id          String        @id @default(cuid())
  senderId    String
  receiverId  String
  subject     String?
  content     String
  status      MessageStatus @default(SENT)
  isRead      Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  readAt      DateTime?

  // Relations
  sender      User          @relation("MessageSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User          @relation("MessageReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// Ticket model
model Ticket {
  id          String         @id @default(cuid())
  ticketNumber String         @unique
  title       String
  description String
  category    String
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus   @default(OPEN)
  userId      String?
  assignedTo  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  resolvedAt  DateTime?

  // Relations
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  assignee    User?          @relation("AssignedTickets", fields: [assignedTo], references: [id], onDelete: SetNull)
  comments    TicketComment[]
  
  @@map("tickets")
}

// Ticket Comment model
model TicketComment {
  id         String   @id @default(cuid())
  ticketId   String
  userId     String
  content    String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("ticket_comments")
}

// Visit model
model Visit {
  id            String      @id @default(cuid())
  propertyId    String
  runnerId      String
  tenantId      String?
  scheduledAt   DateTime
  duration      Int         @default(30) // in minutes
  status        VisitStatus @default(SCHEDULED)
  notes         String?
  photosTaken   Int         @default(0)
  rating        Int?
  clientFeedback String?
  earnings      Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  property      Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  runner        User        @relation("VisitRunner", fields: [runnerId], references: [id], onDelete: Cascade)
  tenant        User?       @relation("VisitTenant", fields: [tenantId], references: [id], onDelete: SetNull)
  
  @@map("visits")
}

// Maintenance model
model Maintenance {
  id             String           @id @default(cuid())
  propertyId     String
  title          String
  description    String
  category       String
  priority       MaintenancePriority @default(MEDIUM)
  status         MaintenanceStatus   @default(OPEN)
  estimatedCost  Float?
  actualCost     Float?
  requestedBy    String
  assignedTo     String?
  scheduledDate  DateTime?
  completedDate  DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  property       Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("maintenance")
}

// Notification model
model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  data      String?          // JSON for additional data
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// System Setting model
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    String
  description String?
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Email Template model
model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  content   String
  category  String
  variables String?  // JSON array of variables
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

// Audit Log model
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entityType  String
  entityId    String?
  oldValues   String?  // JSON
  newValues   String?  // JSON
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

// Document model (existing)
model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String   @default("other")
  file_name   String
  file_path   String
  file_size   Int
  file_type   String
  tags        String?
  uploaded_by String
  status      String   @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [uploaded_by], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

// Enums
enum UserRole {
  TENANT
  OWNER
  BROKER
  RUNNER
  SUPPORT
  ADMIN
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  PENDING
  MAINTENANCE
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  ROOM
  COMMERCIAL
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIAL
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  CHECK
  KHIPU
  OTHER
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum VisitStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}